package main

import (
	"os"

	"github.com/dave/dst/gendst/data"
	. "github.com/dave/jennifer/jen"
)

const (
	dstPath = "github.com/dave/dst"
)

func genNodeToGraphNode() error {
	f := NewFile("main")
	f.HeaderComment("Generated by debug/main.go. DO NOT EDIT.")

	f.Func().Id("NodeToGraphNode").Params(
		Id("node").Qual(dstPath, "Node"),
		Id("level").Id("int"),
		Id("sequence").Id("int"),
	).Op("*").Id("GraphNode").BlockFunc(
		func(g *Group) {
			g.Id("gNode").Op(":=").Op("&").Id("GraphNode").Values(
				Id("Level").Op(":").Id("level"),
				Id("Sequence").Op(":").Id("sequence"),
				Id("Node").Op(":").Id("node"),
				Id("Edges").Op(":").Index().Op("*").Id("GraphEdge").Values(),
			)

			g.Var().Id("child").Op("*").Id("GraphNode")
			g.Id("nextLevel").Op(":=").Id("level").Op("+").Id("1")
			g.Id("nextSeq").Op(":=").Id("0")

			g.Switch(Id("n").Op(":=").Id("node").Assert(Id("type"))).BlockFunc(
				func(g *Group) {
					for key, parts := range data.Info {
						g.Case(Op("*").Qual(dstPath, key)).BlockFunc(
							func(g *Group) {
								g.Id("gNode").Dot("Type").Op("=").Lit(key)
								g.Qual("log", "Println").Call(Lit(key))

								for _, part := range parts {
									switch p := part.(type) {
									case data.Node:
										g.If(p.Field.Get("n").Op("!=").Nil()).Block(
											Id("child").Op("=").Id("NodeToGraphNode").
												Call(
													p.Field.Get("n"),
													Id("nextLevel"),
													Id("nextSeq"),
												),
											Id("gNode").Dot("Edges").Op("=").Append(
												Id("gNode").Dot("Edges"),
												Op("&").Id("GraphEdge").Values(
													Id("Dest").Op(":").Id("child"),
													Id("Relationship").Op(":").Lit(p.Name),
												),
											),
											Id("nextSeq").Op("++"),
										)
									case data.List:
										g.If(p.Field.Get("n").Op("!=").Nil()).Block(
											For(
												List(Id("_"), Id("obj")).
													Op(":=").Range().Add(p.Field.Get("n")),
											).Block(
												Id("child").Op("=").Id("NodeToGraphNode").
													Call(
														Id("obj"),
														Id("nextLevel"),
														Id("nextSeq"),
													),
												Id("gNode").Dot("Edges").Op("=").Append(
													Id("gNode").Dot("Edges"),
													Op("&").Id("GraphEdge").Values(
														Id("Dest").Op(":").Id("child"),
														Id("Relationship").Op(":").Lit(p.Name),
													),
												),
												Id("nextSeq").Op("++"),
											),
										)
									case data.Value:
										g.Id("gNode").Dot("Value").Op("=").Lit(p.Name)
									case data.String:
										g.Id("gNode").Dot("Value").Op("=").Lit(p.Name)
									}
								}
							},
						)
					}
				},
			)

			g.Return().Id("gNode")
		},
	)

	f.Render(os.Stdout)
	f.Save("../graph_generated.go")

	return nil
}
